// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	sqs "github.com/aws/aws-sdk-go-v2/service/sqs"
	mock "github.com/stretchr/testify/mock"

	types "github.com/aws/aws-sdk-go-v2/service/sqs/types"
)

// LoggerSqsClient is an autogenerated mock type for the LoggerSqsClient type
type LoggerSqsClient struct {
	mock.Mock
}

// GetQueueUrl provides a mock function with given fields: queueName
func (_m *LoggerSqsClient) GetQueueUrl(queueName string) (*sqs.GetQueueUrlOutput, error) {
	ret := _m.Called(queueName)

	if len(ret) == 0 {
		panic("no return value specified for GetQueueUrl")
	}

	var r0 *sqs.GetQueueUrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*sqs.GetQueueUrlOutput, error)); ok {
		return rf(queueName)
	}
	if rf, ok := ret.Get(0).(func(string) *sqs.GetQueueUrlOutput); ok {
		r0 = rf(queueName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.GetQueueUrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(queueName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: delay, attributes, body, queueUrl
func (_m *LoggerSqsClient) SendMessage(delay int32, attributes map[string]types.MessageAttributeValue, body string, queueUrl *string) (*sqs.SendMessageOutput, error) {
	ret := _m.Called(delay, attributes, body, queueUrl)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 *sqs.SendMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(int32, map[string]types.MessageAttributeValue, string, *string) (*sqs.SendMessageOutput, error)); ok {
		return rf(delay, attributes, body, queueUrl)
	}
	if rf, ok := ret.Get(0).(func(int32, map[string]types.MessageAttributeValue, string, *string) *sqs.SendMessageOutput); ok {
		r0 = rf(delay, attributes, body, queueUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.SendMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(int32, map[string]types.MessageAttributeValue, string, *string) error); ok {
		r1 = rf(delay, attributes, body, queueUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLoggerSqsClient creates a new instance of LoggerSqsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoggerSqsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoggerSqsClient {
	mock := &LoggerSqsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
