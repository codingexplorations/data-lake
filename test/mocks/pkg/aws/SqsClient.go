// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	sqs "github.com/aws/aws-sdk-go-v2/service/sqs"
	mock "github.com/stretchr/testify/mock"
)

// SqsClient is an autogenerated mock type for the SqsClient type
type SqsClient struct {
	mock.Mock
}

// GetMessages provides a mock function with given fields: attributeNames, queueURL, maxMessages, timeout
func (_m *SqsClient) GetMessages(attributeNames []string, queueURL *string, maxMessages int32, timeout int32) (*sqs.ReceiveMessageOutput, error) {
	ret := _m.Called(attributeNames, queueURL, maxMessages, timeout)

	if len(ret) == 0 {
		panic("no return value specified for GetMessages")
	}

	var r0 *sqs.ReceiveMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func([]string, *string, int32, int32) (*sqs.ReceiveMessageOutput, error)); ok {
		return rf(attributeNames, queueURL, maxMessages, timeout)
	}
	if rf, ok := ret.Get(0).(func([]string, *string, int32, int32) *sqs.ReceiveMessageOutput); ok {
		r0 = rf(attributeNames, queueURL, maxMessages, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.ReceiveMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func([]string, *string, int32, int32) error); ok {
		r1 = rf(attributeNames, queueURL, maxMessages, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueueUrl provides a mock function with given fields: queueName
func (_m *SqsClient) GetQueueUrl(queueName string) (*sqs.GetQueueUrlOutput, error) {
	ret := _m.Called(queueName)

	if len(ret) == 0 {
		panic("no return value specified for GetQueueUrl")
	}

	var r0 *sqs.GetQueueUrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*sqs.GetQueueUrlOutput, error)); ok {
		return rf(queueName)
	}
	if rf, ok := ret.Get(0).(func(string) *sqs.GetQueueUrlOutput); ok {
		r0 = rf(queueName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.GetQueueUrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(queueName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveMessage provides a mock function with given fields: queueURL, messageHandle
func (_m *SqsClient) RemoveMessage(queueURL *string, messageHandle *string) (*sqs.DeleteMessageOutput, error) {
	ret := _m.Called(queueURL, messageHandle)

	if len(ret) == 0 {
		panic("no return value specified for RemoveMessage")
	}

	var r0 *sqs.DeleteMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, *string) (*sqs.DeleteMessageOutput, error)); ok {
		return rf(queueURL, messageHandle)
	}
	if rf, ok := ret.Get(0).(func(*string, *string) *sqs.DeleteMessageOutput); ok {
		r0 = rf(queueURL, messageHandle)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.DeleteMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, *string) error); ok {
		r1 = rf(queueURL, messageHandle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSqsClient creates a new instance of SqsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSqsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SqsClient {
	mock := &SqsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
